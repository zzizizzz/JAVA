제네릭
	+ 클래스 혹은 객체 내부에서 사용할 데이터타입을 외부에서 지정하는 기법
	+ 소스코드 레벨에서 데이터 타입을 결정하는 것이 아니라, 객체 생성 싯점에 데이터타입을 결정하게 하는 기법
		// 소스코드에서 데이터타입을 결정하지 않았다.
		class ArrayList<E> {
			public boolean add(E e) {
				...
			}
		}
		// 객체 생성싯점에 데이터타입을 결정한다.
		ArrayList<Student> studentList = new ArrayList<Student>();
			
	+ 인터페이스 레벨에서 데이터 타입을 결정하는 것이 아니라, 인터페이스 구현 싯점에 데이터타입을 결정하게 하는 기법
		// 인터페이스 레벨에서 데이터타입을 결정하지 않았다.
		interface Comparator<T> {
			int compare(T o1, T o2);
		}
		// 인터페이스 구현싯점에 데이터타입을 결정한다.
		class StudentComparator extends Comparator<Student> {
			public int compare(Student o1, Student o2) {
				return o1.getTotal() - o2.getTotal();
			}
		}
	+ 소스코드 레벨에서 데이터 타입을 결정하지 않고, 메소드 실행싯점에 데이터타입을 결정하는 기법
	   제네릭 메소드는 메소드에는 반환타입 앞에 타입파라미터가 정의되어 있다.
	  제네릭 메소드는 메소드 실행싯점에 전달받는 객체의 타입에 따라서 제네릭타입이 결정된다.
		public class JdbcTemplate {
			// selectOne() 메소드의 반환타입은 매개변수로 전달받는 
                                         // RowMapper인터페이스의 제네릭타입과 동일한다.
			public static <T> T selectOne(String sql, RowMapper<T> rowMapper) {
				....
			}
			// selectList() 메소드의 반환타입은 매개변수로 전달받는 
                                         // RowMapper인터페이스의 제네릭타입과 동일한다.
			public static <T> List<T> selectList(String sql, RowMapper<T> rowMapper) {
				....
			}
		}

		public List<Job> getAllJobs() {
			// 인터페이스를 익명객체로 구현하기
			// ResultSet객체에서 현재 커서가 위치한 행의 데이터를 추출해서 Job객체를 생성하고,
			// 생성된 Job객체에 직종정보를 담아서 반환하는 익명객체를 구현하였음.
			RowMapper<Job> jobRowMapper = new RowMapper<>() {
				public Job mapRow(ResultSet rs) throws SQLException {
					Job job = new Job();
					job.setId(rs.getString("job_id"));
					job.setTitle(rs.getString("job_title"));
					job.setMinSalary(rs.getInt("min_salary"));
					job.setMaxSalary(rs.getInt("max_salary"));
	
					return job;
				}
			};
			
			String sql = "select * from jobs";
			return JdbcTemplate.selectList(sql, jobRowMapper);
		}


		
		// 스프링 컨테이너의 주요 메소드
		// 스프링 컨테이너는 객체를 생성하고, 조립하고, 관리/유지하는 객체다.
		// 개발자는 스프링 컨테이너에 애플리케이션에서 사용할 객체를 미리 등록해 놓구 필요할때 꺼내서 사용할 수 있다.
		interface ApplicationContext {

			Object getBean(String name);
			<T> T getBean(Class<T> classType);
			<T> T getBean(String name, Class<T> classType);
		}

		// 스프링 컨테이너에 "userService"라는 이름으로 UserService객체가 등록되어 있는 경우
		Obect obj = context.getBean("userService");		
		UserService service = (UserService) obj;

		
		// UserService.class는 클래스 리터럴이다.
		// UserService.class는 Class<UserServic>객체를 반환한다.
		UserService service = context.getBean(UserService.class);


제네릭의 사용이유
	1. 컴파일 싯점에 타입을 검사할 수 있다.
		// 제네릭타입을 사용하지 않는 경우
		class FruitBox {
			Object[] arr;
			
			public FruitBox(Object[] arr) {
				this.arr = arr;
			}
			public Object getFruit(int index) {
				return arr[index];
			}
		}
		// Apple 객체가 여러 개 저장되어 있는 배열을 생성한다.
		Apple[] arr = {new Apple(), new Apple()};
		// 배열객체를 전달해서 FruitBox객체를 생성한다.
		FruitBox box = new FruitBox(arr);	
		
		Apple fruit1 = (Apple) box.getFruit(0);
		// FruitBox의 배열객체에서 1번째 객체를 꺼내서 Orange객체로 형변환한다.
		// 배열객체의 1번째에서 Apple객체가 저장되어 있지만,
		// 아래의 코드에서 getFruit(1)의 반환타입이 Object이기 때문에 Orange로 형변환하는 코드를
		// 작성해서 컴파일 에러가 발생하지 않는다.
		// 애플리케이션을 실행하면, 실행싯점에 ClassCastException이 발생한다.
		// 즉, 오류의 발견이 컴파일 싯점이 아닌 실행싯점으로 늦어지는 문제가 생긴다.
		Orange fruit2 = (Orange) box.getFruit(1);	
	

		

	2. 불필요한 클래스 형변환이 필요없어서 성능이 향상된다.
		// 제네릭을 사용하지 않는 경우
		class FruitBox {
			Object[] arr;
			
			public FruitBox(Object[] arr) {
				this.arr = arr;
			}
			public Object getFruit(int index) {
				return arr[index];
			}
		}
		
		Apple[] arr = {new Apple(), new Apple(), new Apple()};
		// arr을 매개변수의 인자로 전달할 때 Apple[]가 Object[]로 형변환된다.
		FruitBox box = new FruitBox(arr);
		
		// 0번째에 저장된 객체를 꺼내면 Object 타입의 객체가 획득된다.
		Object obj1 = box.getFruit(0);	
		// 0번쩨에 저장된 객체를 꺼내서 Apple 타입으로 매번 형변환해야 한다.
		Apple apple1 = (Apple) box.getFruit(0);
		Apple apple2 = (Apple) box.getFruit(1);
		Apple apple3 = (Apple) box.getFruit(2);

		

		// 제네릭을 사용하는 경우
		class FruitBox<T> {
			T[] arr;

			public FruitBox(T[] arr) {
				this.arr = arr;
			}
			public T getFruit(int index) {
				return arr[index];
			}
		}
		
		Apple[] arr = {new Apple(), new Apple(), new Apple()};
		// FruitBox의 T가 전부 Apple 타입으로 결정한다.
		// arr를 생성자의 매개변수 인자로 전달할 때 Apple[]가 그대로 전달된다.
		// 생성자 메소드의 매개변수 타입이 Apple[] arr로 변했기 때문이다.
		FruitBox<Apple> box = new FruitBox<>(arr);

		// FruitBox에서 객체를 꺼낼때도 getFruit() 메소드의 반환타입이 T에서 Apple로 변했기 때문에
		// 불필요한 형변환 없이 그대로 사용할 수 있다.
		Apple apple1 = box.getFruit(0);
		Apple apple2 = box.getFruit(1);
		Apple apple3 = box.getFruit(2);

	3. 타입 안전성을 확보할 수 있다.
		// 제네릭이 적용되지 않은 ArrayList객체라면
		class ArrayList {
			Object[] values = new Object[10];
			
			public boolean add(Object o) { ... }
			public Object get(int index) { ... }
		}

		ArrayList list = new ArrayList();
		// 제네릭이 적용되지 않은 ArrayList객체에는 모든 종류의 객체를 저장하는 것이 가능하다.
		// 즉, ArrayList객체에 특정한 타입의 객체만 저장되어 있다고 확신할 수 없다.
		// 타입 안전성이 확보되지 않는다. 몇번째에 어떤 객체가 저장되어 있을 지 알 수 없다.
		list.add("안녕하세요");
		list.add(100);
		list.add(new Apple());
		list.add(new Student());
	
		
		


		// 제네릭이 적용된 ArrayList
		class ArrayList<E> {
			E[] values;

			public boolean add(E e) { ... }
			public E get(int index) { ... }
		}

		ArrayList<Student> list = new ArrayList<>();
		//list.add("안녕하세요");		// 컴파일 오류
		//list.add(100);		        // 컴파일 오류
		//list.add(new Apple());		// 컴파일 오류
		list.add(new Student());		// 정상
		list.add(new Student());		// 정상
		list.add(new Student());		// 정상

















		


































